# import re
#
# from bot.bot import dp
# from aiogram import types
# from keyboards.admin.panel_group import main_key_group
#
#
# count_group=1
#
#
# @dp.message_handler(content_types=types.ContentType.NEW_CHAT_MEMBERS)
# async def new_chat_member_handler(message: types.Message):
#     """–¢—É—Ç –ø—Ä–æ—Ö–æ–¥–∏–º —Ä–µ–≥—É–ª—è—Ä–∫–æ–π –ø–æ —Ñ–∞–π–ª—É –∞–¥–º–∏–Ω–æ–≤, –≤–∑—è–≤ —Ç–æ–ª—å–∫–æ USER_ID, –∞ –ø–æ—Ç–æ–º ID –∑–∞–º–µ–Ω—è—Ç—å –Ω–∞ USERNAME"""
#     global count_group
#     for new_member in message.new_chat_members:
#         if new_member.id == dp.bot.id:
#             chat_id = message.chat.id
#             chat = await dp.bot.get_chat(message.chat.id) # –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞-–≥—Ä—É–ø–ø—ã
#             if not is_group_id_exists(chat_id):
#                 with open('handlers/GROUP_ID.txt', 'a', encoding='utf-8') as file:
#                     file.write(f"GROUP\n\t{count_group}=> GROUP_ID: {chat_id}\n")
#                 count_group += 1
#                 with open('handlers/user_admin_start.txt', 'r', encoding='utf-8') as file:
#                     match = re.search(r"User_ID:\s*(\d+)", file.read()) # admin_id
#                     match = match.group(1) # ID –≤ —á–∏—Å—Ç–æ–º –≤–∏–¥–µ
#                 admin_username = await dp.bot.get_chat(match)
#
#                 if message.from_user.id == admin_username.id:
#                     await message.answer("–ü–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∞ –û—Ç–∫—Ä—ã—Ç –¥–ª—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üîê", reply_markup=main_key_group)
#
#                 await message.reply(
#                     text=f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\nü§ñ –Ø –ß–∞—Ç-–±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –≥—Ä—É–ø–ø—ã: <i><b>{chat.title}</b></i>\n"
#                     f"\nüòé –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ì—Ä—É–ø–ø—ã: @{admin_username.username}",
#                     parse_mode='HTML'
#                 )
#             else:
#                 await message.reply(
#                     text=f"–í—Å–µ–º –ü—Ä–∏–≤–µ—Ç üëã \n"
#                          f"ü§ñ –Ø –ß–∞—Ç-–±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –≥—Ä—É–ø–ø—ã: <i><b>{chat.title}</b></i>",
#                     parse_mode='HTML'
#                 )
#
#
# def is_group_id_exists(chat_id):
#     """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ ID –≥—Ä—É–ø–ø—ã –≤ —Ñ–∞–π–ª–µ."""
#     try:
#         with open('handlers/GROUP_ID.txt', 'r', encoding='utf-8') as file:
#             for line in file:
#                 if f"GROUP_ID: {chat_id}" in line:
#                     return True
#     except FileNotFoundError:
#         return False
#     return False
import re
import logging
from bot.bot import dp
from aiogram import types
from keyboards.admin.panel_group import main_key_group

count_group = 1


@dp.message_handler(content_types=types.ContentType.NEW_CHAT_MEMBERS)
async def new_chat_member_handler(message: types.Message):
    """–¢—É—Ç –ø—Ä–æ—Ö–æ–¥–∏–º —Ä–µ–≥—É–ª—è—Ä–∫–æ–π –ø–æ —Ñ–∞–π–ª—É –∞–¥–º–∏–Ω–æ–≤, –≤–∑—è–≤ —Ç–æ–ª—å–∫–æ USER_ID, –∞ –ø–æ—Ç–æ–º ID –∑–∞–º–µ–Ω—è—Ç—å –Ω–∞ USERNAME"""
    global count_group
    for new_member in message.new_chat_members:
        if new_member.id == dp.bot.id:  # –ï—Å–ª–∏ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É
            chat_id = message.chat.id
            chat = await dp.bot.get_chat(chat_id)  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞-–≥—Ä—É–ø–ø—ã

            if not is_group_id_exists(chat_id):
                with open('handlers/GROUP_ID.txt', 'a', encoding='utf-8') as file:
                    file.write(f"GROUP\n\t{count_group}=> GROUP_ID: {chat_id}\n")
                count_group += 1

                with open('handlers/user_admin_start.txt', 'r', encoding='utf-8') as file:
                    match = re.search(r"User_ID:\s*(\d+)", file.read())  # admin_id
                    if match:
                        admin_id = match.group(1)  # ID –≤ —á–∏—Å—Ç–æ–º –≤–∏–¥–µ
                        admin_username = await dp.bot.get_chat(admin_id)

                        if message.from_user.id == admin_username.id:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                            try:
                                await message.answer("–ü–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∞ –û—Ç–∫—Ä—ã—Ç –¥–ª—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üîê",
                                                     reply_markup=main_key_group)
                            except Exception as e:
                                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

                        await message.reply(
                            text=f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\nü§ñ –Ø –ß–∞—Ç-–±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –≥—Ä—É–ø–ø—ã: <i><b>{chat.title}</b></i>\n"
                                 f"\nüòé –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ì—Ä—É–ø–ø—ã: @{admin_username.username}",
                            parse_mode='HTML'
                        )
                    else:
                        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            else:
                await message.reply(
                    text=f"–í—Å–µ–º –ü—Ä–∏–≤–µ—Ç üëã \n"
                         f"ü§ñ –Ø –ß–∞—Ç-–±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –≥—Ä—É–ø–ø—ã: <i><b>{chat.title}</b></i>",
                    parse_mode='HTML'
                )


def is_group_id_exists(chat_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ ID –≥—Ä—É–ø–ø—ã –≤ —Ñ–∞–π–ª–µ."""
    try:
        with open('handlers/GROUP_ID.txt', 'r', encoding='utf-8') as file:
            for line in file:
                if f"GROUP_ID: {chat_id}" in line:
                    return True
    except FileNotFoundError:
        return False
    return False